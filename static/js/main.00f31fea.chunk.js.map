{"version":3,"sources":["App.js","index.js"],"names":["Algorithm","props","updateValue","event","setAlgorithm","target","value","algorithm","label","handleChange","title","AlgorithmRadioButton","type","id","name","defaultChecked","onChange","htmlFor","Button","className","onClick","handleClick","InputTextArea","rows","cols","defaultValue","Team","players","join","App","useState","rankings","teamRed","teamWhite","data","setData","readData","document","getElementById","split","filter","el","console","log","newData","sort","a","b","aRanking","bRanking","i","length","ranking","sortData","Math","random","push","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.00f31fea.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst algorithmDefaultValue = 'classic'\nconst playersDefaultValue = `player1\\nplayer2\\nplayer3\\nplayer4`\nconst rankingsDefaultValue = `player1:80\\nplayer2:60\\nplayer3:40\\nplayer4:20`\n\nconst App = (props) => {\n  const [data, setData] = useState({\n    algorithm: algorithmDefaultValue,\n    players: playersDefaultValue,\n    rankings: rankingsDefaultValue,\n    teamRed: [],\n    teamWhite: []\n  })\n\n  const readData = (id) => {\n    return document.getElementById(id).value\n      .split('\\n')\n      .filter(\n        function (el) { return el; } // remove falsy values\n      )\n  }\n\n  const setAlgorithm = (algorithm) => {\n    console.log(\"algorithm\", algorithm)\n    const newData = {\n      ...data,\n      algorithm: algorithm\n    }\n    setData(newData)\n  }\n\n  const sortData = (players, rankings) => {\n    players.sort(function (a, b) {\n      let aRanking = 50\n      let bRanking = 50\n      for (let i = 0; i < rankings.length; i++) {\n        let ranking = rankings[i].split(':')\n        if (ranking.length === 2) {\n          if (ranking[0] === a) {\n            aRanking = ranking[1]\n          }\n          if (ranking[0] === b) {\n            bRanking = ranking[1]\n          }\n        }\n      }\n      return bRanking - aRanking\n    });\n    console.log(\"players (sorted)\", players)\n  }\n\n  const updateData = () => {\n    const algorithm = data.algorithm\n    const players = readData('players-input')\n    const rankings = readData('rankings-input')\n    let teamRed = []\n    let teamWhite = []\n\n    sortData(players, rankings)\n\n    if (algorithm === 'fair' && players.length > 1) {\n      // swap position of top two players before making team rosters to equalize rosters a bit\n      [players[0], players[1]] = [players[1], players[0]]\n    } else if (algorithm === 'random') {\n      players.sort(function (a, b) { return 0.5 - Math.random() });\n    }\n\n    for (let i = 0; i < players.length; i = i + 2) {\n      teamRed.push(players[i])\n    }\n\n    for (let i = 1; i < players.length; i = i + 2) {\n      teamWhite.push(players[i])\n    }\n\n    teamRed.sort()\n    teamWhite.sort()\n\n    const newData = {\n      ...data,\n      algorithm: algorithm,\n      teamRed: teamRed,\n      teamWhite: teamWhite\n    }\n    setData(newData)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Rosters</p>\n      </header>\n      <div className=\"App-content\">\n        <Team id=\"reds\" name=\"Red\" players={data.teamRed} />\n        <Team id=\"whites\" name=\"White\" players={data.teamWhite} />\n        <div className=\"row\">\n          <div id=\"players-column\" className=\"column\">\n            <InputTextArea\n              id=\"players\"\n              label=\"Players\"\n              defaultValue={data.players} />\n          </div>\n          <div id=\"rankings-column\" className=\"column\">\n            <InputTextArea\n              id=\"rankings\"\n              label=\"Rankings\"\n              defaultValue={data.rankings} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <Algorithm setAlgorithm={setAlgorithm} />\n          <div id=\"action-column\" className=\"column flex-end\">\n            <Button handleClick={updateData} label='Run' />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst Algorithm = (props) => {\n\n  const updateValue = (event) => {\n    props.setAlgorithm(event.target.value)\n  }\n\n  return (\n    <div>\n      <div>Algorithm</div>\n      <AlgorithmRadioButton algorithm=\"classic\" label=\"Classic\" handleChange={updateValue}\n        title='The teams take turns picking players.\n        Red team has odd picks: 1st, 3rd, 5th, ...\n        White teams has even picks: 2nd, 4th, ...' />\n      <br />\n      <AlgorithmRadioButton algorithm=\"fair\" label=\"Fair\" handleChange={updateValue}\n        title='Like the classic algorithm, but top two picks are reversed.\n        White team now has the 1st &amp; 4th pick.\n        Red team has the 2nd &amp; 3rd pick.' />\n      <br />\n      <AlgorithmRadioButton algorithm=\"random\" label=\"Random\" handleChange={updateValue}\n        title=\"Random rosters for each run.\" />\n    </div>\n  )\n}\n\nconst AlgorithmRadioButton = (props) => {\n  return (\n    <span title={props.title}>\n      <input\n        type=\"radio\"\n        id={props.algorithm}\n        name=\"algorithm\"\n        defaultChecked={props.algorithm === algorithmDefaultValue}\n        onChange={props.handleChange}\n        value={props.algorithm} />\n      <label htmlFor={props.algorithm}>{props.label}</label>\n    </span>\n  )\n}\n\nconst Button = (props) => {\n  return (\n    <button className=\"button float-right\" onClick={props.handleClick}>\n      {props.label}\n    </button>\n  )\n}\n\nconst InputTextArea = (props) => {\n  return (\n    <div id={props.id}>\n      <div>{props.label}</div>\n      <textarea\n        id={`${props.id}-input`}\n        className=\"resize-none\"\n        rows=\"20\"\n        cols=\"16\"\n        defaultValue={props.defaultValue} />\n    </div>\n  )\n}\n\nconst Team = (props) => {\n  return (\n    <div id=\"{props.id}\">\n      <div className=\"team-name\">Team {props.name}</div>\n      <div className=\"players-list\">{props.players.join(', ')}</div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}